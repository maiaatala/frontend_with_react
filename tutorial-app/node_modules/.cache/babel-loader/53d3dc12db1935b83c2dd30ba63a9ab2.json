{"ast":null,"code":"var _jsxFileName = \"/home/atala/Codes/Github/frontend_with_react/tutorial-app/src/06miniBookList.js\";\n// CSS out of .js\nimport \"./06miniBookList.css\"; // lists in react need a key item field\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst books = [{\n  id: 1,\n  img: \"https://images-na.ssl-images-amazon.com/images/I/8144Vic9C5L.jpg\",\n  alt: \"I Love You to the Moon and Back cover image\",\n  title: \"I Love You to the Moon and Back\",\n  author: \"Amelia Hepworth\",\n  desc: \"something to add\"\n}, {\n  id: 2,\n  img: \"https://images-na.ssl-images-amazon.com/images/I/81-V7skoi6L.jpg\",\n  alt: \"Food IQ Cover Image\",\n  title: \"Food IQ: 100 Questions, Answers, and Recipes to Raise Your Cooking Smarts\",\n  author: \"Daniel Holzman\"\n}, {\n  id: 3,\n  img: \"https://images-na.ssl-images-amazon.com/images/I/61NdJMwAThS.jpg\",\n  title: \"The Body Keeps the Score\",\n  author: \"Bessel van der Kolk M.D.\"\n}]; // you can simply iterate string arrays, but iterate objects are not as simple\n// const names = [\"john\", \"peter\", \"susan\"]; //arrays are const?\n\n/* .map() access each element.\nelementName =>{return} */\n// const newNames = names.map((name) => {\n//     return <h1>{name}</h1>;\n// });\n// todo: something to do\n// ! THIS IS AN ERROR\n// ? question!!!!\n// // console.log(\"hello yarn\")\n// *something somewhat important\n\nexport default function BookList() {\n  /* first {} to access javascript inside html\n    second {} to write css using javascript\n    you change - to camelCaseWords\n    all values must be in \"\"\n    inLineCSS > .css file when rendering */\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"booklist\",\n    style: {\n      alignItems: \"flex-start\"\n    },\n    children: books.map(book => {\n      // const { img, alt, title, author, children } = book;\n      return /*#__PURE__*/_jsxDEV(Book, { ...book\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }, this); // this is how react knows which is the key\n      // .. is a SPREAD OPERATOR\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\nconst Book = props => {\n  const {\n    img,\n    alt,\n    title,\n    author\n  } = props; // names must match with the object\n  // console.log(img);\n  // const { img, title, author } = props; //deconstructing\n  // * attribute, eventHandler\n\n  const clickHandler = () => {\n    alert(\"hello world\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"book\",\n    children: [/*#__PURE__*/_jsxDEV(Image, {\n      image: img,\n      alt: alt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      title: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Author, {\n      name: author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: clickHandler,\n      children: \"reference Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n/* the name on the props.name is given when passing the argument \nsince props is AN OBJECT\nit may have any number of arguments, all given by the invoking line when passing the arguments*/\n\n\nconst Title = props => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: props.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n\nconst Author = props => {\n  return /*#__PURE__*/_jsxDEV(\"h4\", {\n    style: {\n      color: \"#617d98\",\n      fontSize: \"0.75rem\",\n      marginTop: \"0.25rem\"\n    },\n    onClick: () => console.log(`clicked ${name}`),\n    children: props.name.toUpperCase()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\nconst Image = props => {\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: props.image,\n    alt: props.alt,\n    className: \"image\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this); // even the img tag needs to be closed off\n};","map":{"version":3,"sources":["/home/atala/Codes/Github/frontend_with_react/tutorial-app/src/06miniBookList.js"],"names":["books","id","img","alt","title","author","desc","BookList","alignItems","map","book","Book","props","clickHandler","alert","Title","Author","color","fontSize","marginTop","console","log","name","toUpperCase","Image","image"],"mappings":"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","sourcesContent":["// CSS out of .js\nimport \"./06miniBookList.css\";\n// lists in react need a key item field\nconst books = [\n  {\n    id: 1,\n    img: \"https://images-na.ssl-images-amazon.com/images/I/8144Vic9C5L.jpg\",\n    alt: \"I Love You to the Moon and Back cover image\",\n    title: \"I Love You to the Moon and Back\",\n    author: \"Amelia Hepworth\",\n    desc: \"something to add\",\n  },\n  {\n    id: 2,\n    img: \"https://images-na.ssl-images-amazon.com/images/I/81-V7skoi6L.jpg\",\n    alt: \"Food IQ Cover Image\",\n    title:\n      \"Food IQ: 100 Questions, Answers, and Recipes to Raise Your Cooking Smarts\",\n    author: \"Daniel Holzman\",\n  },\n  {\n    id: 3,\n    img: \"https://images-na.ssl-images-amazon.com/images/I/61NdJMwAThS.jpg\",\n    title: \"The Body Keeps the Score\",\n    author: \"Bessel van der Kolk M.D.\",\n  },\n];\n// you can simply iterate string arrays, but iterate objects are not as simple\n// const names = [\"john\", \"peter\", \"susan\"]; //arrays are const?\n/* .map() access each element.\nelementName =>{return} */\n// const newNames = names.map((name) => {\n//     return <h1>{name}</h1>;\n// });\n// todo: something to do\n// ! THIS IS AN ERROR\n// ? question!!!!\n// // console.log(\"hello yarn\")\n// *something somewhat important\n\nexport default function BookList() {\n  /* first {} to access javascript inside html\n    second {} to write css using javascript\n    you change - to camelCaseWords\n    all values must be in \"\"\n    inLineCSS > .css file when rendering */\n  return (\n    <section className=\"booklist\" style={{ alignItems: \"flex-start\" }}>\n      {/* makes the the bottom of the grid self align */}\n      {/* {newNames} */}\n      {books.map((book) => {\n        // const { img, alt, title, author, children } = book;\n        return <Book key={book.id} {...book} />;\n        // this is how react knows which is the key\n        // .. is a SPREAD OPERATOR\n      })}\n    </section>\n  );\n}\n\nconst Book = (props) => {\n  const { img, alt, title, author } = props; // names must match with the object\n  // console.log(img);\n  // const { img, title, author } = props; //deconstructing\n  // * attribute, eventHandler\n\n  const clickHandler = () => {\n    alert(\"hello world\");\n  };\n\n  return (\n    <article className=\"book\">\n      <Image image={img} alt={alt}></Image>\n      <Title title={title} />\n      <Author name={author} />\n      <button type=\"button\" onClick={clickHandler}>\n        reference Example\n      </button>\n    </article>\n  );\n};\n\n/* the name on the props.name is given when passing the argument \nsince props is AN OBJECT\nit may have any number of arguments, all given by the invoking line when passing the arguments*/\nconst Title = (props) => {\n  return <h1>{props.title}</h1>;\n};\n\nconst Author = (props) => {\n  return (\n    <h4\n      style={{\n        color: \"#617d98\",\n        fontSize: \"0.75rem\",\n        marginTop: \"0.25rem\",\n      }}\n      onClick={() => console.log(`clicked ${name}`)}\n    >\n      {props.name.toUpperCase()}\n    </h4>\n  );\n};\n\nconst Image = (props) => {\n  return <img src={props.image} alt={props.alt} className=\"image\" />;\n  // even the img tag needs to be closed off\n};\n"]},"metadata":{},"sourceType":"module"}